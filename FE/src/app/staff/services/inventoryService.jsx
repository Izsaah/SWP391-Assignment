import axios from 'axios';

const API_URL = import.meta.env.VITE_API_URL;

/**
 * Fix image URL - Th√™m base URL n·∫øu c·∫ßn
 * @param {string} imageUrl - URL ·∫£nh t·ª´ BE
 * @returns {string} - URL ·∫£nh ƒë√£ fix
 */
const fixImageUrl = (imageUrl) => {
  if (!imageUrl) return null;
  
  console.log('üñºÔ∏è Original image URL from BE:', imageUrl);
  
  // N·∫øu ƒë√£ c√≥ http/https th√¨ gi·ªØ nguy√™n
  if (imageUrl.startsWith('http://') || imageUrl.startsWith('https://')) {
    console.log('‚úÖ URL already has protocol, keeping as is:', imageUrl);
    return imageUrl;
  }
  
  // N·∫øu l√† relative path (b·∫Øt ƒë·∫ßu b·∫±ng /), th√™m base URL
  if (imageUrl.startsWith('/')) {
    const baseUrl = API_URL.replace('/api', ''); // Remove /api
    const fixedUrl = `${baseUrl}${imageUrl}`;
    console.log('üîß Fixed relative path:', fixedUrl);
    return fixedUrl;
  }
  
  // N·∫øu ch·ªâ l√† filename (kh√¥ng c√≥ / v√† kh√¥ng c√≥ http), th√™m base URL + /images/
  // V√≠ d·ª•: "tesla-model3-white.jpg" -> "https://.../images/tesla-model3-white.jpg"
  const baseUrl = API_URL.replace('/api', ''); // Remove /api
  const fixedUrl = `${baseUrl}/images/${imageUrl}`;
  console.log('üîß Fixed filename with /images/ path:', fixedUrl);
  return fixedUrl;
};

/**
 * Fetches variants for a specific model
 * @param {number} modelId - The model ID
 * @returns {Promise} - Promise containing variants data
 */
const fetchVariantsForModel = async (modelId) => {
  try {
    const token = localStorage.getItem('token');
    
    const response = await axios.post(
      `${API_URL}/staff/searchVehicleVariant`,
      { id: modelId },
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );

    if (response.data && response.data.data && response.data.data.variants) {
      return response.data.data.variants;
    }
    return [];
  } catch (error) {
    console.error(`Error fetching variants for model ${modelId}:`, error);
    return [];
  }
};

/**
 * Fetches all inventory data from the backend
 * @returns {Promise} - Promise containing inventory data
 */
export const fetchInventory = async () => {
  try {
    const token = localStorage.getItem('token');
    
    const response = await axios.post(
      `${API_URL}/staff/viewInventory`,
      {}, // Empty body for POST request
      {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );

    if (response.data && response.data.data) {
      // ‚úÖ TH√äM: Fetch variants cho m·ªói model
      const inventories = response.data.data;
      
      for (const inventory of inventories) {
        if (inventory.list && Array.isArray(inventory.list)) {
          for (const model of inventory.list) {
            // G·ªçi API ƒë·ªÉ l·∫•y variants
            const variants = await fetchVariantsForModel(model.modelId);
            model.lists = variants; // Set variants v√†o model
          }
        }
      }
      
      return {
        success: true,
        data: inventories
      };
    } else {
      return {
        success: false,
        message: 'Invalid response format'
      };
    }
  } catch (error) {
    console.error('Error fetching inventory:', error);
    return {
      success: false,
      message: error.response?.data?.message || 'Failed to fetch inventory data'
    };
  }
};

/**
 * Transform backend inventory data to frontend format
 * Ch·ªâ l·∫•y xe c√≥ h√†ng (isActive=true v√† quantity>0)
 * @param {Array} backendData - Data from backend API
 * @returns {Array} - Transformed data for frontend
 */
export const transformInventoryData = (backendData) => {
  if (!backendData || !Array.isArray(backendData)) {
    return [];
  }

  const transformedData = [];

  backendData.forEach((inventory) => {
    // Ki·ªÉm tra c√≥ h√†ng kh√¥ng (quantity > 0)
    const hasStock = inventory.quantity && parseInt(inventory.quantity) > 0;
    
    if (!hasStock) {
      return; // Skip inventory kh√¥ng c√≥ h√†ng
    }

    // Iterate through each model in the inventory
    if (inventory.list && Array.isArray(inventory.list)) {
      inventory.list.forEach((model) => {
        // Ch·ªâ l·∫•y model ƒëang active
        if (!model.isActive) {
          return;
        }

        // Check n·∫øu c√≥ variants
        if (model.lists && Array.isArray(model.lists) && model.lists.length > 0) {
          // C√≥ variants - iterate qua t·ª´ng variant
          model.lists.forEach((variant) => {
            // Ch·ªâ l·∫•y variant ƒëang active (c√≥ s·∫µn ƒë·ªÉ b√°n)
            if (!variant.isActive) {
              return;
            }

            transformedData.push({
              // Basic IDs
              id: `${model.modelName}-${variant.variantId}`,
              inventoryId: inventory.inventoryId,
              modelId: model.modelId,
              variantId: variant.variantId,
              
              // Display information
              title: `${model.modelName} ${variant.versionName}`,
              model: model.modelName,
              variant: variant.versionName,
              color: variant.color,
              description: model.description,
              
              // Pricing
              price: variant.price,
              priceUsd: variant.price,
              
              // Image - Fix URL n·∫øu c·∫ßn
              imageUrl: variant.image ? fixImageUrl(variant.image) : null,
              
              // Status - lu√¥n l√† "available" v√¨ ƒë√£ filter xe c√≥ h√†ng
              status: 'available',
              condition: 'New Vehicle',
              
              // Quantity
              quantity: inventory.quantity,
              
              // Active flags
              isActive: variant.isActive,
              modelActive: model.isActive
            });
          });
        } else {
          // KH√îNG c√≥ variants - hi·ªÉn th·ªã ·ªü model level
          transformedData.push({
            // Basic IDs
            id: `model-${model.modelId}`,
            inventoryId: inventory.inventoryId,
            modelId: model.modelId,
            variantId: null,
            
            // Display information
            title: model.modelName,
            model: model.modelName,
            variant: 'Standard', // Default variant name
            color: 'N/A',
            description: model.description,
            
            // Pricing (default ho·∫∑c t·ª´ model n·∫øu c√≥)
            price: 0, // BE kh√¥ng c√≥ price ·ªü model level
            priceUsd: 0,
            
            // Image - Fix URL n·∫øu c·∫ßn (model level kh√¥ng c√≥ image t·ª´ BE)
            imageUrl: null,
            
            // Status
            status: 'available',
            condition: 'New Vehicle',
            
            // Quantity
            quantity: inventory.quantity,
            
            // Active flags
            isActive: true,
            modelActive: model.isActive
          });
        }
      });
    }
  });

  return transformedData;
};

